Primeiros passos quando criar uma api em node.js
Até o passso 13, foi tudo feito antes de iniciar o projeto, o resto, foi durante.

1 - git init
2 - npm init -y ( Com o -y ele já cria o package.json com conifgurações padrão)
3 - npm i -D typescript @types/node
4 - criar o arquivo tsconfig.json na raiz do projeto
5 - instalar eslint-config-standard-with-typescript (Pegar npm instal no repositório do github)
6 - criar o arquivo .eslintrc.json
7 - criar arquivo .eslintignore
8 - adicionar husky no projeto - npm i -D husky
9 - criar arquivo .huskyrc.json
10 - adicionar lint-staged - npm i -D lint-staged
11 - criar arquivo .lintstagedrc.json
12 - adicionar jest no projeto - npm i -D jest @types/jest ts-jest
12 - rodar npx jest --init
13 - criar um arquivo teste e rodar npm test
14 - Depois de um tempo, foi instalado o bcrypt, com npm i bcrypt (É uma dependência de produção)
15 - Depois npm i @types/bcrypt -D, esse sim como desenvolvimento, apenas para suporte ao typescript
16 - Foi instalado o shelf, que faz testes de integração com o mongodb - npm i -D @shelf/jest-mongodb
17 - E também foi instalado o mongodb npm i mongodb (DEPENDÊNCIA DE PRODUÇÃO) e dps o @types/mongodb como DEPENDÊNCIA DE DESENVOLVIMENTO


Sempre criar erros personalizados, extendendo a classe Error do JavaScript
1 - Basta criar uma pasta errors
2 - Criar o arquivo .ts
3 - Criar a função, extender de Error e usar super() e this
4 - Criar tambem uma pasta helper e um file ts, que retornar o erro como objeto, com o nome do erro
Ex-> 400 é um badRequest

Sintax sugar
O monstro manguinho transformou isso:
    if (!httpRequest.body.name) {
      return badRequest(new MissingParamError('name'))
    }

    if (!httpRequest.body.email) {
      return badRequest(new MissingParamError('email'))
    }

em isso:
    const requiredField = ['name', 'email']
    for (const field of requiredField) {
      if (!httpRequest.body[field]) {
        return badRequest(new MissingParamError(field))
      }
    }
  }

  SOLID
  S -Single responsability principle - Isolar cada classe e função e cada um vai fazer uma coisa.
  I - Interface segregation principle - Criamos interfaces que fazem apenas uma coisa, assim uma classe pode utilizar várias interfaces,
  e cada interface faz uma coisa diferente

  Teste unitário - JEST
  Utiliza com a extensão .spec Exemplo --> signup.spec.ts


  Teste de integração - JEST
  Utiliza com a extensão .test Exemplo --> signup.test.ts

  O JEST entende sozinho essa nomenclatura acima, ele já sabe que é o teste.

  Quando for instalar uma dependência
  Exemplo -> npm i validator
  Após o download,
  rodar o npm -i @types/validator -D (Tem que colocar o -D, para ser apenas no ambiente de desenvolvimento)
  O @types é do typescript, para neste caso, reconhecer os tipos do validator.
  
  Nos testes do JEST em caso de sucesso, você não mocka com stub, spyOn, etc..
  O default do mock ja é o caso de sucesso.
  Só mockamos quando quisermos retornar erro

  Isso
  const account = await this.addAccountRepository.add(Object.assign({}, accountData, { password: hashedPassword }))
  Pode ser substituído, por isso:
  const account = await this.addAccountRepository.add({ ...accountData, password: hashedPassword })

  Na interface, você não coloca que é async/await, coloca somente na implementação do método
  Exemplo 

  Interface

  export interface Encrypter {
  encrypt: (value: string) => Promise<string>
}

Implementação do método 

import { Encrypter } from '../../data/protocols/encrypter'
export class BCryptAdapter implements Encrypter {
  async encrypt (value: string): Promise<string> {
    return ''
  }
}

DEPENDÊNCIAS
Aconteceu um caso, o bcrypt ele precisa receber um value e um saltNumber, mas não é todo biblioteca
de criptografia que precisa de um salt, e para funcionar meu test e a minha classe de produção,
eu precisaria receber esse salt como parametro e também coloca-lo na interface.
Mas isso não é legal, por que a minha interface é genérica para criptografia, se eu fizer isso,
estarei fazendo o meu código depender da do bcrypt, que é uma dependência externa.
Então, ao invés disso, eu passo no construtor da classe o salt como se fosse uma
dependência da classe e utilizo nos métodos dessa classe. Isso é uma dependency injection

PONTO DE ATENÇÃO - BANCO DE DADOS
Tanto no trabalho, quanto em projetos pessoais. Atenção a versão do banco de dados 
que você está utilizando em desenvolvimento x produção, elas tem que ser iguais,
e quem define a versão? O SERVIDOR ! Se o servidor só aceitar por exemplo,
a versão do mongodb 4.0.2, tanto a sua versão de desenvolvimento, quanto de produção,
devem estar na mesma versão. Se por acaso você estiver usando em desenvolvimento a versão 
4.0.3, pode ser que recursos dessa versão que você esteja utilizando na sua query, não funcione
em produção, por que esses recursos são somente na versão atual.

GIT 
Comando legal -> git stash /caminho/do/arquivo, você coloca o arquivo que você quiser em uma especie de esconderijo 
ai o git não enxerga ele, e depois para tirar, só dar um git stash pop
Se quiser verificar quais arquivos estão em stash -> git stash list

ADAPTER
Adapter é responsável por pegar uma interface de um tipo e converter para outro tipo.
Exemplo da vida real: Um adaptador de tomada na TV
Exemplo no código: o método handle do controlar SignUp, espera receber um http request enquanto a rota
do express espera uma requisição do tipo Req, Res, então para preservarmos o principio Single principle

Lembre-se do principio do open-closed - aberto para extensão e fechado para alteração.
Então o código deve ser feito para aceitar novas features, mas não alterar as já existentes. O mesmo vale para os testes.

SEGURANÇA
Criptografia x Encode
Criptografia é utilizado para seguranca. Ex: Hash em senha.
Encode não é utilizado para seguranca, e sim transporte de dados. Ex: Chamar uma rota, encode da url antes de enviar, pq nem sempre a url entende
todos os caracteres. E dps vc faz uma decode, nao tem chave, nada..

Criptografia
Existem dois tipos de criptografia
1- Hash -> Irreversível e determinístico, ou seja, depois que uma senha é hasheada, vc nunca mais consegue voltar ela a uma string normal.
E determinístico, é q se vc fiz o hash de uma senha 123, vc sempre obterá o mesmo valor.
Ex de hash: sha1, sha256, md5
2- Encrypt ->É reversível, se voce possuir a chave secreta, poderá voltar a senha ao normal.
Essa é a principal diferença, hash não utiliza chave secreta e encrypt, utiliza.

A lib que estamos usando, o Bcrpt, utiliza mais uma camada de segurança, o kdf (Key derivation function)
Que é o salt, que no nosso caso, vale 12 ( número mais comum em seguro).
Basicamente, ele cria uma string aleatória de 12 caracteres e da um append no final da senha que vai ser 
registrada no banco.
O bcrypt remove o salt na hora de fazer a comparacao, mas só ele sabe fazer isso.
Assim, o hash se torna não determinístico.
Mas qual é o tradeoff? Ele deixa lento a geração de hash.(Mais de 1 segundo).

Pastas do projeto - As camadas
Domain - Onde ficam os casos de uso e as entidades.
Data - Implementação dos casos de uso. Onde ficam as regras de negócio.
Infra - Implementações que usam libs de terceiros
Presentation - Onde preparamos os dados que serão "apresentados" pela view (no caso da API, a view é apenas um JSON ou XML)
Validation - Onde fazemos validações
Main - Onde fazemos a composição das classes


DOCKER
FROM node:17 -> Especificando qual é a versão do node
WORKDIR /usr/src/clean-node-api -> Onde eu quero salvar na minha máquina
COPY ./package.json . -> Copia o packge.json do projeto( Como rodei o terminal dentro do projeto, eu só preciso colocar "." no final,
Se estivesse em outra pasta, teria que passar o caminho)
RUN npm install --only=prod -> Roda o npm install instalando apenas as dependências de producao
COPY ./dist ./dist -> Copia a pasta dist para a pasta dist do meu docker
EXPOSE 5000 -> Expoem a porta que voce quer rodar o projeto(pode ser qualquer uma)
CMD npm start -> da o start no node dentro do container( Por isso vc baixa as libs do docker no site dockerhub)

Comandos
sudo docker images
sudo docker ps
sudo docker ps -a
sudo docker container prune -> Exclui todos os containers da máquina (Otimo para liberar espaco no pc kkkk)
sudo docker image prune -> Exclui todos os containers da máquina (Otimo para liberar espaco no pc kkkk)
Para rodar o script que foi criado(Cirar o build)
docker build -t clean-node-api .
Se voce quiser verificar se foi tudo foi criado certinho, vc entra dentro do docker e checa se as pastas estao la e se tudo foi copiado corretamente.
sudo docker run -it clean-node-api sh
e roda um "ls" depois
Para rodar o projeto
sudo docker run -p 5000:5000 clean-node api -> Aqui vc ta falando que vc quer q rode na porta 5000 da sua maquina com a porta 5000 do container do docker
subir npm run up

LAYERS

- O Presentation só conhece do Domain;
- O Domain não conhece de ninguém;
- A Infra só conhece o Data
- O Data só conhece o Domain